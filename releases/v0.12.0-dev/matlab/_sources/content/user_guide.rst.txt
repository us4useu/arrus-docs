==========
User Guide
==========

This section describes how users can acquire data using ultrasound hardware.
Users can communicate with the device via a communication `session` object.
During the session it is possible to upload and run `operations`.

Configuring session
===================

.. note::

    The below sections contains details on how to configure the
    provided hardware. You can skip to :ref:`running_example`
    if you already have a session configuration file prepared by e.g.
    us4us developers, and you don't need to change any device-related
    parameters.


Session configuration file
--------------------------

A session configuration file consists of device settings valid for a given
session.
Currently, the configuration file can be written in .prototxt file
(a protobuf i/o format readable for humans).
Sample configuration files are available `here <https://github.com/us4useu/arrus/tree/develop/arrus/core/io/test-data>`_.

Currently only us4R device can be configured using session configuration file.

us4R
````

To use the us4R system in a particular session, create a field ``us4r`` in the
session configuration file.

::

    us4r: {
      # here goes us4r configuration spec.
      hv: {
        # ...
      }
      probe: {
        # ...
      }
      adapter: {
        # ...
      }
    }

The us4R device typically includes a high voltage supplier,
which can be configured by providing the ``hv`` field. The following power
supplies are currently supported:

- us4R-Lite systems: manufacturer: ``us4us``, name: ``hv256``,
- us4R systems: manufacturer: ``us4us``, name: ``us4rpsc``,
- us4OEM+ with internal HV: manufacturer: ``us4us``, name: ``us4oemhvps``.


::

    hv: {
      model_id {
        manufacturer: "us4us"
        name: "hv256"
      }
    }

To turn off the high voltage supplier, skip the ``hv`` field.


Based on the HV selected, our software will try to automatically select the type of digital backplane (DBAR) to be used:

- for the systems with ``hv256`` power supply, ``dbarlite`` will be used,
- for the systems with ``us4rpsc`` power supply, ``us4rpsc`` will be used,
- for the systems ``us4oemhvps``, a system with no digital backplane will be assumed.

It is also possible to explicitly specify the backplane model in the configuration file, just provide the field
``digital_backplane``:

::

    digital_backplane: {
      model_id {
        manufacturer: "us4us"
        name: "model_name"
      }
    }


Where ``model_name`` can be one of the following: ``dbarlite`` or ``us4rpsc``.



To configure us4r’s signal transmission/data reception, it is essential to
specify settings of the probe and probe adapter used in the system.

Specify the settings of the probe and probe adapter
'''''''''''''''''''''''''''''''''''''''''''''''''''

Examples:

- `use predefined probe and adapter <https://github.com/us4useu/arrus/blob/develop/arrus/core/io/test-data/us4r.prototxt>`_
- `create custom probe and adapter <https://github.com/us4useu/arrus/blob/develop/arrus/core/io/test-data/custom_us4r.prototxt>`_

Probe Model
...........

The user can specify which probe model they are currently using in one of the
following ways:

1. describe probe model by the providing ``probe`` field, e.g.:

::

    probe: {
      id: {
        manufacturer: "acme"
        name: "my_custom_probe"
      }
      n_elements: 64,
      curvature_radius: 50e-3,
      pitch: 0.21e-3,
      tx_frequency_range: {
        begin: 1e6,
        end: 40e6
      },
      voltage_range: {
        begin: 0,
        end: 100
      }
    }

The following ``probe`` attributes can be specified:

- ``id``: a unique probe model id — a pair: ``(manufacturer, name)``,
- ``n_elements``: number of probe elements,
- ``pitch``: distance between two adjacent probe elements [m],
- ``curvature_radius``: radius of probe’s curvature; when omitted and n_elements is a scalar, a linear probe type is assumed [m],
- ``tx_frequency_range``: acceptable range of center frequencies for this probe [min, max] (a closed interval) [Hz],
- ``voltage_range``: range of acceptable voltage values, 0.5*Vpp.


2. specify probe model by providing ``probe_id``:

::

    probe_id: {
      manufacturer: "esaote",
      name: "sl1543"
    }

If the latter method is used, the probe model description will be searched
in the dictionary file.

When no dictionary file is provided, the
:ref:`default-dictionary` will be assumed.


Probe-to-adapter connection
...........................

The ``probe_to_adapter_connection`` field specifies how the ``probe`` elements
map to the ``adapter`` channels.

There are several ways to specify this mapping:

- ``channel_mapping`` - a list of adapter channels to which the subsequent probe channels should be assigned, i.e. ``channel_mapping[i]`` is the adapter’s channel to be assigned to probe channel ``i``
- ``channel_mapping_ranges`` - a list of adapter channel regions to which the subsequent probe channels should be assigned.

See `here <https://github.com/us4useu/arrus/blob/develop/arrus/core/io/test-data/custom_us4r.prototxt>`_
for an example usage of ``probe_to_adapter_connection`` field.

Note:
This field is required only when a custom probe and adapter are specified in
the session configuration file (i.e. ``probe`` and ``adapter`` fields).
When the ``probe_id`` or ``adapter_id`` are provided and the connection between
them is already defined, this field can be omitted — the arrus package will
try to determine the probe-adapter mapping based on the dictionary file.
When ``probe_to_adapter_connection`` is still given, it will overwrite
the settings from the dictionary file.

Rx Settings
...........

The user can specify the default data reception settings to be set on all
system modules. To do this, add an `rx_settings` with the following attributes:

- ``dtgc_attenuation``: digital time gain compensation to apply (given as attenuation value to apply). Available values: 0, 6, 12, 18, 24, 30, 36, 42 [dB]. Optional, no value means turn off DTGC.
- ``pga_gain``: a gain to apply on a programmable gain amplifier. Available values: 24, 30 [dB]
- ``lna_gain``: a gain to apply on a low-noise amplifier. Available values:  12, 18, 24 [dB]
- ``tgc_samples``: a list of tgc curve samples to apply [dB]. Optional, no value/empty list means turn off TGC
- ``lpf_cutoff``: low-pass filter cut-off frequency, available values: 10000000, 15000000, 20000000, 30000000, 35000000, 50000000 [Hz]
- ``active_termination`` active termination to apply, available values: 50, 100, 200, 400. Optional, no value means turn off active termination.

Channel masks
.............

To turn off specific channels of the us4R system (i.e. the probe elements),
add both of the following fields to the `us4r` settings:

- ``channels_mask``: a list of system channels that should always be disabled
- ``us4oem_channels_mask``: a list of channel masks to apply on each us4OEM module

In order to minimize the risk of including channels that should be turned off,
for example by changing adapter model by mistake
(e.g. using esaote2 adapter mapping when actually esaote3 is installed),
it is necessary to specify the fields:
`channels_mask` and ``us4oem_channels_mask``. If these two mappings do not
match, an error will be reported at the device configuration stage.


Dictionary
----------

It is possible to specify a dictionary of probe models and adapters that are
supported by the us4R system. To do this, add the ``dictionary_file`` field
to the configuration file:

::

    dictionary_file: "dictionary.prototxt"

Currently, the ``dictionary.prototxt`` file will be searched in the same
directory where session settings is located.

When no dictionary file is provided, the
:ref:`default_dictionary` is assumed.

An example dictionary is available here:
https://github.com/us4useu/arrus/blob/develop/arrus/core/io/test-data/dictionary.prototxt

The dictionary file contains a description of ultrasound probes and adapters
that are supported by the us4R device. The file consists of the  following fields:

::

    probe_adapter_models: [
      {
        # probe adapter description, the same as described for us4r.adapter field
      },
      {
        # probe adapter description...
      }
    ]

    probe_models: [
      {
        # probe model description, the same as described for us4r.probe field
      },
      {
        # probe model description...
      }
    ]

    probe_to_adapter_connections: [
      {
        # probe to adapter connection, the same as described for us4r.probe_to_adapter_connection field
      },
      {
        # probe to adapter connection...
      }

    ]

.. _default-dictionary:

Default dictionary
``````````````````

Arrus package already contains a dictionary files of probes and adapters that
were tested on us4r devices.
To use the default dictionary, omit providing ``dictionary_file`` field in your
session configuration file.

Currently, the default dictionary contains definitions of the following probes:

- esaote:

  - probes: ``sl1543``, ``al2442``, ``sp2430``
  - adpaters: ``esoate``, ``esaote2``, ``esaote3``

- als:

  - probes: ``l14-6a``
  - adapters: ``esaote2``, ``esaote3``

- apex:

  - probes: ``tl094``
  - adapters: ``esaote2``, ``esaote3``

- ultrasonix:

  - probes: ``l14-5/38``
  - adapters: ``ultrasonix``

- olympus:

  - probes: ``5L128``
  - adapters: ``esaote3``

- ATL/Philips:

  - probes: ``l7-4``
  - adapters: ``atl/philips``

- custom Vermon:

  - probes: ``la/20/128``
  - adapters: ``atl/philips``


Custom TX waveforms
```````````````````

.. note::

    Custom TX waveforms are available only for the OEM+ systems.

It is possible to specify arbitrary waveforms using
``arrus.ops.us4r.Waveform``, ``arrus.ops.us4r.WaveformSegment``
``arrus.ops.us4r.WaveformBuilder``
classes.

Conceptually, ``WaveformSegment`` is one particular fragment of a ``Waveform``:
it is a sequence of states ``WaveformSegment.state`` along with their duration ``Waveform.duration``.
**Importantly, the entire segment can be repeated multiple times (using the ``Waveform.nRepeats`` parameter) without consuming the internal memory
of TX pulsers (which is limited to 256 registers for the OEM+ rev 1).**

``Waveform`` is a collection of segments to be set on the device pulsers.

``WaveformBuilder`` is a convenience class that allows to build the waveform as a sequence of states and duration.

**5-level Waveforms**

In the us4OEM+ there are 2 positive HV **rails** (HVP0 and HVP1) and 2 negative rails (HVM0 and HVM1).

In ARRUS, we translate the concept of the **rail** to the concepts of the **amplitude** and Waveform **states** in the following way:

- The waveform **state** is a ``WaveformSegment`` attribute ``s``: it can be one of {-2, -1, 0, 1, 2} The value ``s`` is translated to HV rail in the following way:

    - s = -2 corresponds to HVM0, s = +2 corresponds to HVP0,
    - s = -1 corresponds to HVM1, s = +1 corresponds to HVP1,
    - s = 0 corresponds to CLAMP state.

- The ``amplitude`` is a ``Pulse`` attribute: it can be one of {1, 2}.
  The ``Pulse`` object is translated to a periodic pulse (``Waveform``) (l, -l),
  repeated a given number of times (``nPeriods``), with the given transmitting
  frequency (``centerFrequency``).

.. error::

    Currently, voltage settings for level 1 are not available in MATLAB API, but this functionality will be available soon in ARRUS 0.12.0.
    At the moment, the level 1 voltage is set to ``voltage-1``, where the ``voltage`` is the level 2 amplitude
    (which can be set using the method ``us4r.setVoltage(voltage)``).

You can set the amplitudes -2, -1, +1, +2 using the ``us4r.setVoltage`` method, e.g.:

.. code-block:: python

    us4r.setVoltage([m1, p1; m2, p2])

where:

- ``m1`` is the HV voltage for the state -1 (**absolute value**),
- ``p1`` is the voltage for the state +1,
- ``m2`` is the voltage for the state -2 (**absolute value**),
- ``p2`` is the voltage for the state +2.

**NOTE: all of the set_hv_voltage values must be positive**.

The following restrictions apply: ``m1 < m2`` and ``p1 < p2``.

**Example**

.. figure:: img/custom_waveform2.png

     Example custom TX waveform.

Please also see the ``examples/rawRfPwiCustomSequenceCustomTxWaveform.m`` script.

.. code-block:: python

    waveformBuilder = arrus.ops.us4r.WaveformBuilder();
    wf = waveformBuilder.add([0.2e-6, 0.5e-6, 1e-6], [-1, 1, -1], 1) ...
                        .add([1.5e-6, 2e-6,   3e-6], [1,  0,  1], 1) ...
                        .build();

    nTx = 2;
    tx = Tx("aperture", txAperture, "delays", zeros(1, nElements), "pulse", wf);
    rx = Rx("aperture", rxAperture, "sampleRange", [0 nSamples]);
    ops(1) = TxRx("tx", tx, "rx", rx, "pri", 500e-6);

    tx = Tx("aperture", txAperture, "delays", zeros(1, nElements), "pulse", wf);
    rx = Rx("aperture", rxAperture, "sampleRange", [0 nSamples]);
    ops(2) = TxRx("tx", tx, "rx", rx, "pri", 500e-6);

    sequence = TxRxSequence("ops", ops);